from flask import Flask,request,make_response
from flask_caching import Cache
import time
import pickle,base64


import sys

def hook(evt, arg):
    if evt in ["sys._getframe", "object.__getattr__", "object.__setattr__"]:
        return
    frame = sys._getframe(0)
    f = frame.f_code.co_filename
    
    while frame:
        if frame.f_back is None:
            break
        else:
            frame = frame.f_back
        
        func_name = frame.f_code.co_name
        if frame.f_code.co_filename == f:

            if func_name == "index":
                if evt not in ['sys._getframe', 'pickle.find_class']:
                    raise RuntimeError('Event not allowed')

# sys.addaudithook(hook)
config = {
  "DEBUG": True,
  "CACHE_TYPE": "memcached",
}
app = Flask(__name__)
app.config.from_mapping(config)
cache = Cache(app)

secret = "cCySMEDJ9LOlStFzu-k9HE0XUZIkGlGqMkDOBHOldXI"

@app.route("/")
@cache.memoize(timeout=50)
def index():
    # rsp=make_response("hello")
    # cookie = rsp.set_cookie('session', secret)
    # return rsp
    session = request.cookies.get('session')
    if session is not None:
      print(session)
      base64_decoded = base64.b64decode(session)
      pickled = pickle.loads(base64_decoded)
    print("no session")
    return "hello"
if __name__ == "__main__":
    app.run(host="0.0.0.0",port=5000)